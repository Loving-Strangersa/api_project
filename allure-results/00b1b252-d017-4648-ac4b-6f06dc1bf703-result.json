{"name": "test_play[case1]", "status": "broken", "statusDetails": {"message": "TypeError: a bytes-like object is required, not 'bool'", "trace": "self = <test_cases.test_paly.Test_paly object at 0x000001AA1D0AA1C0>\ncase = {'api_url': '/playurl/v3/play/playurl', 'check_jsonpath_contId': '$.body.content.contId', 'check_jsonpath_contName': '$.body.content.contName', 'check_re': None, ...}\n\n    @pytest.mark.parametrize(\"case\", cases)\n    def test_play(self, case):\n        logger.info(\"用例开始执行,用例{}:{}\".format(case[\"id\"], case[\"title\"]))\n    \n        # 数据替换,替换Excel中request_data中contId 正则表达式 (?<=contId=).*?(?=&)\n        # case = replace_mark_with_data(cases,\"#contId#\",\"661543514\")\n    \n        # 发起请求\n        response = send_request(\n            method=case[\"method\"],\n            url=case[\"api_url\"],\n            data=case[\"request_data\"])\n    \n        # 将Excel的json转为dict\n        expected = json.loads(case[\"expected\"])\n        logger.info(\"期望结果为{}\".format(expected))\n    \n        # 读取Excel中的jsonpath\n        check_jsonpath_contid = case[\"check_jsonpath_contId\"]\n        check_jsonpath_contname = case[\"check_jsonpath_contName\"]\n        logger.info(\n            \"本次jsonpath请求contId为:{}，contName为{}\".format(\n                check_jsonpath_contid,\n                check_jsonpath_contname))\n    \n        # 对code contId contName 进行断言\n        assert response.json()[\"code\"] == expected[\"code\"]\n        assert jsonpath.jsonpath(\n            response.json(),\n            check_jsonpath_contid) == jsonpath.jsonpath(\n            expected,\n            check_jsonpath_contid)\n        assert jsonpath.jsonpath(\n            response.json(),\n            check_jsonpath_contname) == jsonpath.jsonpath(\n            expected,\n            check_jsonpath_contname)\n    \n>       allure.attach(\n            response.json()[\"code\"] == expected[\"code\"],\n            \"第一次断言\",\n            allure.attachment_type.TEXT)\n\ntest_cases\\test_paly.py:81: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Python38\\lib\\site-packages\\allure_commons\\_allure.py:164: in __call__\n    plugin_manager.hook.attach_data(body=body, name=name, attachment_type=attachment_type, extension=extension)\nC:\\Python38\\lib\\site-packages\\pluggy\\hooks.py:286: in __call__\n    return self._hookexec(self, self.get_hookimpls(), kwargs)\nC:\\Python38\\lib\\site-packages\\pluggy\\manager.py:93: in _hookexec\n    return self._inner_hookexec(hook, methods, kwargs)\nC:\\Python38\\lib\\site-packages\\pluggy\\manager.py:84: in <lambda>\n    self._inner_hookexec = lambda hook, methods, kwargs: hook.multicall(\nc:\\python38\\lib\\site-packages\\allure_pytest\\listener.py:215: in attach_data\n    self.allure_logger.attach_data(uuid4(), body, name=name, attachment_type=attachment_type, extension=extension)\nC:\\Python38\\lib\\site-packages\\allure_commons\\reporter.py:117: in attach_data\n    plugin_manager.hook.report_attached_data(body=body, file_name=file_name)\nC:\\Python38\\lib\\site-packages\\pluggy\\hooks.py:286: in __call__\n    return self._hookexec(self, self.get_hookimpls(), kwargs)\nC:\\Python38\\lib\\site-packages\\pluggy\\manager.py:93: in _hookexec\n    return self._inner_hookexec(hook, methods, kwargs)\nC:\\Python38\\lib\\site-packages\\pluggy\\manager.py:84: in <lambda>\n    self._inner_hookexec = lambda hook, methods, kwargs: hook.multicall(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <allure_commons.logger.AllureFileLogger object at 0x000001AA7B9C0490>\nbody = True, file_name = 'e9883565-fc62-4275-aa40-ca8f73b2b58b-attachment.txt'\n\n    @hookimpl\n    def report_attached_data(self, body, file_name):\n        destination = os.path.join(self._report_dir, file_name)\n        with open(destination, 'wb') as attached_file:\n            if isinstance(body, text_type):\n                attached_file.write(body.encode('utf-8'))\n            else:\n>               attached_file.write(body)\nE               TypeError: a bytes-like object is required, not 'bool'\n\nC:\\Python38\\lib\\site-packages\\allure_commons\\logger.py:62: TypeError"}, "attachments": [{"name": "请求地址", "source": "3621585b-c157-4fcd-845c-7c9bfd029877-attachment.txt", "type": "text/plain"}, {"name": "请求头", "source": "5a4e273f-cdf1-4dbf-a8fd-5d2d4fbfee8d-attachment.txt", "type": "text/plain"}, {"name": "请求方法", "source": "86d4603a-4625-44cd-838d-046cdf43cc30-attachment.txt", "type": "text/plain"}, {"name": "请求参数", "source": "1f70b077-266f-4178-8438-b50595b6b4f9-attachment.txt", "type": "text/plain"}, {"name": "反回状态码", "source": "2c15fcc9-832b-408e-9fac-abf8ea2599cb-attachment.txt", "type": "text/plain"}, {"name": "响应结果", "source": "234bce8c-fbf1-4076-adbf-e9b35dab1c94-attachment.txt", "type": "text/plain"}, {"name": "第一次断言", "source": "e9883565-fc62-4275-aa40-ca8f73b2b58b-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "case", "value": "{'id': 2, 'title': '请求contId为123456\\n非正常节目id', 'method': 'get', 'api_url': '/playurl/v3/play/playurl', 'request_data': 'contId=123456&ott=true&rateType=&ott=false', 'expected': '{\\n    \"code\": \"400\",\\n    \"rid\": \"PROGRAM_OFFLINE\",\\n    \"playCode\": \"404001002\",\\n    \"respId\": \"bcd2fefeec5eacd75810f40f40dfabe2_DjKuJA7M0P7Esdmb78O3ww==\",\\n    \"info\": null,\\n    \"message\": \"节目已下线，请尝试其他节目\",\\n    \"httpmessage\": null,\\n    \"timeStamp\": 1614221774968,\\n    \"body\": {\\n        \"content\": null,\\n        \"playBill\": null,\\n        \"auth\": null,\\n        \"urlInfo\": null,\\n        \"urlInfos\": null,\\n        \"mediaFiles\": null,\\n        \"degradeRateInfo\": null,\\n        \"priceInfo\": null,\\n        \"clientAction\": null,\\n        \"terminal\": null,\\n        \"advertInfo\": {\\n            \"isAdvert\": \"1\",\\n            \"toast\": \"\",\\n            \"playLengths\": null,\\n            \"reason\": null,\\n            \"source\": \"\"\\n        },\\n        \"startRate\": null,\\n        \"cpinfo\": null,\\n        \"dolbyUrlInfo\": null,\\n        \"gslbCdn\": null\\n    }\\n}', 'check_sql': None, 'check_jsonpath_contId': '$.body.content.contId', 'check_jsonpath_contName': '$.body.content.contName', 'check_re': None}"}], "start": 1623999178600, "stop": 1623999178650, "uuid": "d53c0a59-492e-4bd3-a02c-484644cc4926", "historyId": "9ac44b3fb195a2ae7e88e08d908faa98", "testCaseId": "ee410dde69c0cbc8d0749e68a9971b87", "fullName": "test_cases.test_paly.Test_paly#test_play", "labels": [{"name": "parentSuite", "value": "test_cases"}, {"name": "suite", "value": "test_paly"}, {"name": "subSuite", "value": "Test_paly"}, {"name": "host", "value": "LAPTOP-L7B50IS8"}, {"name": "thread", "value": "21112-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_cases.test_paly"}]}